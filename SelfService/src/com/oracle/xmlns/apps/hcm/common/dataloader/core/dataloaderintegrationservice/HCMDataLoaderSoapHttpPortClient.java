package com.oracle.xmlns.apps.hcm.common.dataloader.core.dataloaderintegrationservice;

import com.nadec.selfservice.common.hdl.HDLHelper;

import com.sun.xml.ws.api.addressing.AddressingVersion;
import com.sun.xml.ws.api.addressing.WSEndpointReference;
import com.sun.xml.ws.developer.WSBindingProvider;
import com.sun.xml.ws.message.StringHeader;

import utilities.*;

import java.util.Map;
import java.util.UUID;

import javax.xml.ws.BindingProvider;

import weblogic.wsee.jws.jaxws.owsm.SecurityPoliciesFeature;

import java.io.IOException;
import java.io.StringReader;

import java.net.URL;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.json.JSONException;

import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import weblogic.jws.Policies;
// !THE CHANGES MADE TO THIS FILE WILL BE DESTROYED IF REGENERATED!
// This source file is generated by Oracle tools
// Contents may be subject to change
// For reporting problems, use the following
// Version = Oracle WebServices (11.1.1.0.0, build build (050908.2342.55399))

public class HCMDataLoaderSoapHttpPortClient {

    private static final AddressingVersion WS_ADDR_VER = AddressingVersion.W3C;

    public static void main(String[] args) {
        HCMDataLoaderSoapHttpPortClient b =
            new HCMDataLoaderSoapHttpPortClient();
        System.out.println("Invoking service 1 to load data to interface tables.......");
        // Long processId=Long.valueOf(b.loadDataService("UCMFA00009635"));
        // System.out.println("process Id: "+processId);

    }

    public String loadDataService(String id, String path, String hdlId) {
        String status = "Internal Error";
        HCMDataLoader_Service hCMDataLoader_Service =
            new HCMDataLoader_Service();

        // Configure security feature
        //SecurityPoliciesFeature securityFeatures = new SecurityPoliciesFeature(new String[] {"oracle/wss11_username_token_with_message_protection_client_policy" });
        SecurityPoliciesFeature securityFeatures =
            new SecurityPoliciesFeature(new String[] { "oracle/wss_username_token_over_ssl_client_policy" });
        HCMDataLoader hCMDataLoader =
            hCMDataLoader_Service.getHCMDataLoaderSoapHttpPort(securityFeatures);
        // Get the request context to set the outgoing addressing properties
        WSBindingProvider wsbp = (WSBindingProvider)hCMDataLoader;
        // WSEndpointReference replyTo =new WSEndpointReference("http://<replace with the URL of the callback service>", WS_ADDR_VER);
        String uuid = "uuid:" + UUID.randomUUID();

        //  wsbp.setOutboundHeaders(new StringHeader(WS_ADDR_VER.messageIDTag, uuid),replyTo.createHeader(WS_ADDR_VER.replyToTag));
        path =
"https://java-hcuk.java.em2.oraclecloudapps.com/TestApplication-ViewController-context-root/faces";
        // Add your code to call the desired methods.
        //    URL rpath=HCMDataLoaderSoapHttpPortClient.class.getResource("keystore.jks");
        //    System.out.println("=================================>"+rpath.toString());
        Map<String, Object> requestContext = wsbp.getRequestContext();
        requestContext.put(BindingProvider.USERNAME_PROPERTY, "hcmuser");
        requestContext.put(BindingProvider.PASSWORD_PROPERTY, "Welcome@123");
        requestContext.put("oracle.webservices.security.keystore.type", "JKS");
        requestContext.put("oracle.webservices.security.keystore.location",
                           "keystore.jks");
        requestContext.put("oracle.webservices.security.keystore.password",
                           "welcome");
        requestContext.put("oracle.webservices.security.encryption.key.alias",
                           "orakey");
        requestContext.put("oracle.webservices.security.encryption.key.password",
                           "welcome");
        requestContext.put("oracle.webservices.security.recipient.key.alias",
                           "orakey");
        String contentId = id;
        String parameters = "";
        String response = "Failed to invoke service";
        try {
            System.out.println("Entered try block and going to invoke service....");
            response = hCMDataLoader.importAndLoadData(contentId, parameters);
            System.out.println("The response received from the server is ...");
            System.out.println(response);
            HDLHelper.updateHDLFile(response, hdlId,
                                    "Calling Load Data Service",id);
            //get Status of load submitted...
            Long processId = Long.valueOf(response);
            String loadStatus = getStatus(hCMDataLoader, processId, hdlId);
            System.out.println("File load status: " + loadStatus);
            status = response;
        } catch (ServiceException e) {
            System.out.println("Error occurred during the invocation of the service ..." +
                               e);
            // e.printStackTrace();
        } catch (JSONException e) {
        }
        //        catch(Exception e){
        //            System.out.println("Error occurred during the invocation of the service ..."+e);
        //        }

        return status;
    }

    private String getStatus(HCMDataLoader hCMDataLoader, Long id,
                             String hdlId) {
        String status = "Errored out";
        boolean loadstatus = false;
        try {
            loadstatus = invokeGetDataSetStatus(hCMDataLoader, id, hdlId);
            status = "" + loadstatus;
        } catch (ServiceException e) {
        } catch (IOException e) {
        } catch (SAXException e) {
        } catch (ParserConfigurationException e) {
        }
        System.out.println("\n\n Load Completed for Data Set with UCM Content Id " +
                           id + " with status " + loadstatus);
        return status;
    }

    private boolean invokeGetDataSetStatus(HCMDataLoader hcmLoaderService,
                                           Long processId,
                                           String hdlId) throws ParserConfigurationException,
                                                                SAXException,
                                                                IOException,
                                                                ServiceException {
        boolean resp = true;
        boolean firstTimeInprogress = true;
        try {


            String response =
                hcmLoaderService.getDataSetStatus("ProcessId=" + processId);
            DocumentBuilderFactory factory =
                DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document document =
                builder.parse(new InputSource(new StringReader(response)));
            NodeList flowList =
                document.getElementsByTagName("DATA_SET_STATUS");
            NodeList childList;

            for (int i = 0; i < flowList.getLength(); i++) {
                childList = flowList.item(i).getChildNodes();
                for (int j = 0; j < childList.getLength(); j++) {
                    Node childNode = childList.item(j);
                    if ("DATA_SET".equals(childNode.getNodeName())) {
                        NodeList dataSeteChildNodes =
                            childNode.getChildNodes();
                        {
                            for (int k = 0; k < dataSeteChildNodes.getLength();
                                 k++) {
                                {
                                    Node childDSNode =
                                        dataSeteChildNodes.item(k);
                                    if ("STATUS".equals(childDSNode.getNodeName())) {
                                        String status =
                                            dataSeteChildNodes.item(k).getTextContent().trim();
                                        System.out.println("Current Status of the Data Set " +
                                                           dataSeteChildNodes.item(k).getTextContent().trim());
                                        if ("NOT_STARTED".equals(dataSeteChildNodes.item(k).getTextContent().trim())) {
                                            HDLHelper.updateHDLFile(processId.toString(),
                                                                    hdlId,
                                                                    status,null);
                                        } else if ("IN_PROGRESS".equals(dataSeteChildNodes.item(k).getTextContent().trim()) &&
                                                   firstTimeInprogress) {
                                            HDLHelper.updateHDLFile(processId.toString(),
                                                                    hdlId,
                                                                    status,null);
                                        }

                                        if ("COMPLETED".equals(status) ||
                                            "ERROR".equals(status)) {
                                            System.out.println("Data load status in interface tables :" +
                                                               status);

                                            HDLHelper.updateHDLFile(processId.toString(),
                                                                    hdlId,
                                                                    status,null);
                                            return true;
                                        } else {
                                            try {
                                                System.out.println("Waiting for " +
                                                                   (6000 /
                                                                    1000) +
                                                                   " secs, to recalculate the status ... ");
                                                Thread.sleep(6000);
                                                invokeGetDataSetStatus(hcmLoaderService,
                                                                       processId,
                                                                       hdlId);
                                                resp = true;
                                            } catch (InterruptedException e) {
                                                System.out.println("\n\nException while thread waiting....Program Exit");
                                                resp = false;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

            }
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return resp;
    }

}
